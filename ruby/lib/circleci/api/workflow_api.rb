=begin
#CircleCI API

#This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

module CircleCi
  class WorkflowApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Approve a job
    # Approves a pending approval job in a workflow.
    # @param approval_request_id The ID of the job being approved.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def approve_pending_approval_job_by_id(approval_request_id, id, opts = {})
      data, _status_code, _headers = approve_pending_approval_job_by_id_with_http_info(approval_request_id, id, opts)
      data
    end

    # Approve a job
    # Approves a pending approval job in a workflow.
    # @param approval_request_id The ID of the job being approved.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def approve_pending_approval_job_by_id_with_http_info(approval_request_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowApi.approve_pending_approval_job_by_id ...'
      end
      # verify the required parameter 'approval_request_id' is set
      if @api_client.config.client_side_validation && approval_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'approval_request_id' when calling WorkflowApi.approve_pending_approval_job_by_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkflowApi.approve_pending_approval_job_by_id"
      end
      # resource path
      local_var_path = '/workflow/{id}/approve/{approval_request_id}'.sub('{' + 'approval_request_id' + '}', approval_request_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MessageResponse' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowApi#approve_pending_approval_job_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a workflow
    # Cancels a running workflow.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def cancel_workflow(id, opts = {})
      data, _status_code, _headers = cancel_workflow_with_http_info(id, opts)
      data
    end

    # Cancel a workflow
    # Cancels a running workflow.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def cancel_workflow_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowApi.cancel_workflow ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkflowApi.cancel_workflow"
      end
      # resource path
      local_var_path = '/workflow/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MessageResponse' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowApi#cancel_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a workflow
    # Returns summary fields of a workflow by ID.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [Workflow]
    def get_workflow_by_id(id, opts = {})
      data, _status_code, _headers = get_workflow_by_id_with_http_info(id, opts)
      data
    end

    # Get a workflow
    # Returns summary fields of a workflow by ID.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Workflow, Integer, Hash)>] Workflow data, response status code and response headers
    def get_workflow_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowApi.get_workflow_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkflowApi.get_workflow_by_id"
      end
      # resource path
      local_var_path = '/workflow/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Workflow' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowApi#get_workflow_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a workflow's jobs
    # Returns a sequence of jobs for a workflow.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [WorkflowJobListResponse]
    def list_workflow_jobs(id, opts = {})
      data, _status_code, _headers = list_workflow_jobs_with_http_info(id, opts)
      data
    end

    # Get a workflow&#x27;s jobs
    # Returns a sequence of jobs for a workflow.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkflowJobListResponse, Integer, Hash)>] WorkflowJobListResponse data, response status code and response headers
    def list_workflow_jobs_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowApi.list_workflow_jobs ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkflowApi.list_workflow_jobs"
      end
      # resource path
      local_var_path = '/workflow/{id}/job'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'WorkflowJobListResponse' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowApi#list_workflow_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rerun a workflow
    # Reruns a workflow.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [RerunWorkflowParameters] :body 
    # @return [InlineResponse202]
    def rerun_workflow(id, opts = {})
      data, _status_code, _headers = rerun_workflow_with_http_info(id, opts)
      data
    end

    # Rerun a workflow
    # Reruns a workflow.
    # @param id The unique ID of the workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [RerunWorkflowParameters] :body 
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def rerun_workflow_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowApi.rerun_workflow ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkflowApi.rerun_workflow"
      end
      # resource path
      local_var_path = '/workflow/{id}/rerun'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse202' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowApi#rerun_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
