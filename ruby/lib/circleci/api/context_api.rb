=begin
#CircleCI API

#This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

module CircleCi
  class ContextApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add or update an environment variable
    # Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
    # @param context_id ID of the context (UUID)
    # @param env_var_name The name of the environment variable
    # @param [Hash] opts the optional parameters
    # @option opts [EnvironmentvariableEnvvarnameBody] :body 
    # @return [InlineResponse2002]
    def add_environment_variable_to_context(context_id, env_var_name, opts = {})
      data, _status_code, _headers = add_environment_variable_to_context_with_http_info(context_id, env_var_name, opts)
      data
    end

    # Add or update an environment variable
    # Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
    # @param context_id ID of the context (UUID)
    # @param env_var_name The name of the environment variable
    # @param [Hash] opts the optional parameters
    # @option opts [EnvironmentvariableEnvvarnameBody] :body 
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def add_environment_variable_to_context_with_http_info(context_id, env_var_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContextApi.add_environment_variable_to_context ...'
      end
      # verify the required parameter 'context_id' is set
      if @api_client.config.client_side_validation && context_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_id' when calling ContextApi.add_environment_variable_to_context"
      end
      # verify the required parameter 'env_var_name' is set
      if @api_client.config.client_side_validation && env_var_name.nil?
        fail ArgumentError, "Missing the required parameter 'env_var_name' when calling ContextApi.add_environment_variable_to_context"
      end
      # resource path
      local_var_path = '/context/{context-id}/environment-variable/{env-var-name}'.sub('{' + 'context-id' + '}', context_id.to_s).sub('{' + 'env-var-name' + '}', env_var_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContextApi#add_environment_variable_to_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new context
    # @param [Hash] opts the optional parameters
    # @option opts [ContextBody] :body 
    # @return [Context]
    def create_context(opts = {})
      data, _status_code, _headers = create_context_with_http_info(opts)
      data
    end

    # Create a new context
    # @param [Hash] opts the optional parameters
    # @option opts [ContextBody] :body 
    # @return [Array<(Context, Integer, Hash)>] Context data, response status code and response headers
    def create_context_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContextApi.create_context ...'
      end
      # resource path
      local_var_path = '/context'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Context' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContextApi#create_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a context
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def delete_context(context_id, opts = {})
      data, _status_code, _headers = delete_context_with_http_info(context_id, opts)
      data
    end

    # Delete a context
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def delete_context_with_http_info(context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContextApi.delete_context ...'
      end
      # verify the required parameter 'context_id' is set
      if @api_client.config.client_side_validation && context_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_id' when calling ContextApi.delete_context"
      end
      # resource path
      local_var_path = '/context/{context-id}'.sub('{' + 'context-id' + '}', context_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MessageResponse' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContextApi#delete_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove an environment variable
    # Delete an environment variable from a context.
    # @param env_var_name The name of the environment variable
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def delete_environment_variable_from_context(env_var_name, context_id, opts = {})
      data, _status_code, _headers = delete_environment_variable_from_context_with_http_info(env_var_name, context_id, opts)
      data
    end

    # Remove an environment variable
    # Delete an environment variable from a context.
    # @param env_var_name The name of the environment variable
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def delete_environment_variable_from_context_with_http_info(env_var_name, context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContextApi.delete_environment_variable_from_context ...'
      end
      # verify the required parameter 'env_var_name' is set
      if @api_client.config.client_side_validation && env_var_name.nil?
        fail ArgumentError, "Missing the required parameter 'env_var_name' when calling ContextApi.delete_environment_variable_from_context"
      end
      # verify the required parameter 'context_id' is set
      if @api_client.config.client_side_validation && context_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_id' when calling ContextApi.delete_environment_variable_from_context"
      end
      # resource path
      local_var_path = '/context/{context-id}/environment-variable/{env-var-name}'.sub('{' + 'env-var-name' + '}', env_var_name.to_s).sub('{' + 'context-id' + '}', context_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MessageResponse' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContextApi#delete_environment_variable_from_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a context
    # Returns basic information about a context.
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [Context]
    def get_context(context_id, opts = {})
      data, _status_code, _headers = get_context_with_http_info(context_id, opts)
      data
    end

    # Get a context
    # Returns basic information about a context.
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Context, Integer, Hash)>] Context data, response status code and response headers
    def get_context_with_http_info(context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContextApi.get_context ...'
      end
      # verify the required parameter 'context_id' is set
      if @api_client.config.client_side_validation && context_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_id' when calling ContextApi.get_context"
      end
      # resource path
      local_var_path = '/context/{context-id}'.sub('{' + 'context-id' + '}', context_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Context' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContextApi#get_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List contexts
    # List all contexts for an owner.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :owner_id The unique ID of the owner of the context. Specify either this or owner-slug.
    # @option opts [String] :owner_slug A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
    # @option opts [String] :owner_type The type of the owner. Defaults to \&quot;organization\&quot;. Accounts are only used as context owners in server.
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @return [InlineResponse200]
    def list_contexts(opts = {})
      data, _status_code, _headers = list_contexts_with_http_info(opts)
      data
    end

    # List contexts
    # List all contexts for an owner.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :owner_id The unique ID of the owner of the context. Specify either this or owner-slug.
    # @option opts [String] :owner_slug A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
    # @option opts [String] :owner_type The type of the owner. Defaults to \&quot;organization\&quot;. Accounts are only used as context owners in server.
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def list_contexts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContextApi.list_contexts ...'
      end
      if @api_client.config.client_side_validation && opts[:'owner_type'] && !['account', 'organization'].include?(opts[:'owner_type'])
        fail ArgumentError, 'invalid value for "owner_type", must be one of account, organization'
      end
      # resource path
      local_var_path = '/context'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'owner-id'] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      query_params[:'owner-slug'] = opts[:'owner_slug'] if !opts[:'owner_slug'].nil?
      query_params[:'owner-type'] = opts[:'owner_type'] if !opts[:'owner_type'].nil?
      query_params[:'page-token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse200' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContextApi#list_contexts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List environment variables
    # List information about environment variables in a context, not including their values.
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def list_environment_variables_from_context(context_id, opts = {})
      data, _status_code, _headers = list_environment_variables_from_context_with_http_info(context_id, opts)
      data
    end

    # List environment variables
    # List information about environment variables in a context, not including their values.
    # @param context_id ID of the context (UUID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def list_environment_variables_from_context_with_http_info(context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContextApi.list_environment_variables_from_context ...'
      end
      # verify the required parameter 'context_id' is set
      if @api_client.config.client_side_validation && context_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_id' when calling ContextApi.list_environment_variables_from_context"
      end
      # resource path
      local_var_path = '/context/{context-id}/environment-variable'.sub('{' + 'context-id' + '}', context_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContextApi#list_environment_variables_from_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
