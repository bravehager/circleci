=begin
#CircleCI API

#This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

require 'date'

module CircleCi
  # Project level test metrics response
  class InlineResponse20012
    # The average number of tests executed per run
    attr_accessor :average_test_count

    # Metrics for the most frequently failing tests
    attr_accessor :most_failed_tests

    # The number of tests with the same success rate being omitted from most_failed_tests
    attr_accessor :most_failed_tests_extra

    # Metrics for the slowest running tests
    attr_accessor :slowest_tests

    # The number of tests with the same duration rate being omitted from slowest_tests
    attr_accessor :slowest_tests_extra

    # The total number of test runs
    attr_accessor :total_test_runs

    # Test counts grouped by pipeline number and workflow id
    attr_accessor :test_runs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'average_test_count' => :'average_test_count',
        :'most_failed_tests' => :'most_failed_tests',
        :'most_failed_tests_extra' => :'most_failed_tests_extra',
        :'slowest_tests' => :'slowest_tests',
        :'slowest_tests_extra' => :'slowest_tests_extra',
        :'total_test_runs' => :'total_test_runs',
        :'test_runs' => :'test_runs'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'average_test_count' => :'Object',
        :'most_failed_tests' => :'Object',
        :'most_failed_tests_extra' => :'Object',
        :'slowest_tests' => :'Object',
        :'slowest_tests_extra' => :'Object',
        :'total_test_runs' => :'Object',
        :'test_runs' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CircleCi::InlineResponse20012` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CircleCi::InlineResponse20012`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'average_test_count')
        self.average_test_count = attributes[:'average_test_count']
      end

      if attributes.key?(:'most_failed_tests')
        if (value = attributes[:'most_failed_tests']).is_a?(Array)
          self.most_failed_tests = value
        end
      end

      if attributes.key?(:'most_failed_tests_extra')
        self.most_failed_tests_extra = attributes[:'most_failed_tests_extra']
      end

      if attributes.key?(:'slowest_tests')
        if (value = attributes[:'slowest_tests']).is_a?(Array)
          self.slowest_tests = value
        end
      end

      if attributes.key?(:'slowest_tests_extra')
        self.slowest_tests_extra = attributes[:'slowest_tests_extra']
      end

      if attributes.key?(:'total_test_runs')
        self.total_test_runs = attributes[:'total_test_runs']
      end

      if attributes.key?(:'test_runs')
        if (value = attributes[:'test_runs']).is_a?(Array)
          self.test_runs = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @average_test_count.nil?
        invalid_properties.push('invalid value for "average_test_count", average_test_count cannot be nil.')
      end

      if @most_failed_tests.nil?
        invalid_properties.push('invalid value for "most_failed_tests", most_failed_tests cannot be nil.')
      end

      if @most_failed_tests_extra.nil?
        invalid_properties.push('invalid value for "most_failed_tests_extra", most_failed_tests_extra cannot be nil.')
      end

      if @slowest_tests.nil?
        invalid_properties.push('invalid value for "slowest_tests", slowest_tests cannot be nil.')
      end

      if @slowest_tests_extra.nil?
        invalid_properties.push('invalid value for "slowest_tests_extra", slowest_tests_extra cannot be nil.')
      end

      if @total_test_runs.nil?
        invalid_properties.push('invalid value for "total_test_runs", total_test_runs cannot be nil.')
      end

      if @test_runs.nil?
        invalid_properties.push('invalid value for "test_runs", test_runs cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @average_test_count.nil?
      return false if @most_failed_tests.nil?
      return false if @most_failed_tests_extra.nil?
      return false if @slowest_tests.nil?
      return false if @slowest_tests_extra.nil?
      return false if @total_test_runs.nil?
      return false if @test_runs.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          average_test_count == o.average_test_count &&
          most_failed_tests == o.most_failed_tests &&
          most_failed_tests_extra == o.most_failed_tests_extra &&
          slowest_tests == o.slowest_tests &&
          slowest_tests_extra == o.slowest_tests_extra &&
          total_test_runs == o.total_test_runs &&
          test_runs == o.test_runs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [average_test_count, most_failed_tests, most_failed_tests_extra, slowest_tests, slowest_tests_extra, total_test_runs, test_runs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CircleCi.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
